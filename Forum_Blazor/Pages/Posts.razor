@page "/posts"
@using Entities.Models
@using Contracts.Services

@inject IPostService _postService
@inject NavigationManager _navMgr


<PageTitle>Posts</PageTitle>

<h3>Posts</h3>

<AuthorizeView>
    
    <Authorized>
        <button class="btn btn-primary btn-rounded" @onclick="CreatePost">+</button>
        <br/>
    </Authorized>

    <NotAuthorized>
        <div>
            <p>Log-in first, to create a Post!</p>
            <br/>
        </div>
    </NotAuthorized>
</AuthorizeView>


@if (_allPosts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_allPosts.Any())
 {
     <p>
         <em>No posts items exist. Please add some.</em>
     </p>
     
 }
else if (!_postsToShow.Any())
 {
     <p>
         <em>No posts matching your search criteria</em>
     </p>
 }
 else
 {
     <div class="row">
         @foreach (var item in _postsToShow)
         {
             <div class="col-sm-4">
                 <div class="card">
                     <div class="card-body">
                         <h5 class="card-title">@item.Header [@item.Id]</h5>
                         <p class="card-text">@item.Author!.UserName</p>
                         <a href="#" class="btn btn-primary" @onclick="@(() => ShowPost(item.Id))">View post</a>
                     </div>
                 </div>
             </div>
         }
     </div>
     
 }

@if (!string.IsNullOrEmpty(_errorLabel))
{
    <label style="color: red">@_errorLabel</label>
    
}



@code {
    private ICollection<Post> _allPosts, _postsToShow;
    private string _errorLabel;

    protected override async Task OnInitializedAsync()
    {
        _allPosts = await _postService.GetAsync();
        _postsToShow = _allPosts;
    }

    private void CreatePost()
    {
        _navMgr.NavigateTo("/CreatePost");
    }

    private void RemovePost(int itemId)
    {
        Console.WriteLine($"Post-id to remove {itemId}");
    }

    private void EditPost(int itemId)
    {
        Console.WriteLine($"Post-id to edit {itemId}");
    }


    private void ShowPost(int itemId)
    {
        _navMgr.NavigateTo($"/posts/{itemId}");
    }
}