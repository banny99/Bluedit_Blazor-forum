@page "/login"
@using Forum_Blazor.Authentication
@using Entities.Models
@using Contracts.Services
@using UIElements

@inject IAuthService _authService
@inject IPostService _postService
@inject IUserService _userService
@inject ICommentService _commentService
@inject NavigationManager _navMgr


<PageTitle>Log-in</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h3>Log-in</h3>
        
        <div class="card">
            <h3>Please login</h3>
            <div class="field">
                <label>User name:</label>
                <input type="text" @bind="_userName"/>
            </div>
            <div class="field">
                <label style="text-align: center">Password:</label>
                <input type="password" @bind="_password"/>
            </div>
            @if (!string.IsNullOrEmpty(_errorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @_errorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button type="submit" class="btn btn-primary btn-block mb-4" @onclick="LoginAsync">log in</button>
            </div>

            <div class="field">
                <p>Do NOT have an account? Register.</p>
                <button type="button" class="btn btn-primary btn-rounded" @onclick="Register">register</button>
            </div>

        </div>
    </NotAuthorized>
    
    @* ------------------------------------------------------------ *@
    
    <Authorized>
        <h3>Hello, @context.User.Identity!.Name</h3>
        <button class="btn btn-danger btn-rounded" @onclick="RemoveAccount">+ delete account</button>
        
        <br/>
        <br/>
        
        <h5>Here you can see your stats.</h5>
        <br/>
        <button class="btn btn-primary btn-rounded" @onclick="CreatePost">+ create post</button>

        @if (_yourPosts == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!_yourPosts.Any())
         {
             <p>
                 <em>No posts items exist. Please add some.</em>
             </p>
             
         }
        else
         {
             <br/>
             <div class="row">
                 <h2>Your Posts [@_yourPosts.Count]</h2>
                 @foreach (var item in _yourPosts)
                 {
                     <div class="col-sm-6">
                         <div class="card">
                             <div class="card-body">
                                 <h5 class="card-title">@item.Header [@item.Id]</h5>
                                 <p class="card-text">@item.Author.UserName</p>
                                 <a href="#" class="btn btn-primary" @onclick="@(() => ViewPost(item.Id))">view</a>
                                 <a href="#" class="btn btn-warning" @onclick="@(() => EditPost(item.Id))">edit</a>
                                 <a href="#" class="btn btn-danger" @onclick="@(() => RemovePost(item.Id))">delete</a>
                             </div>
                         </div>
                     </div>
                 }
             </div>
         }
        
        
        @if (_yourComments == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!_yourComments.Any())
        {
            <p>
                <em>No comment items exist. Please add some.</em>
            </p>
        }
                 
        else
        {
            <br/>
            <div class="row">
                <h2>Your Comments [@_yourComments.Count]</h2>
                @foreach (var item in _yourComments)
                {
                    <div class="col-sm-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">post #@item.PostId [@item.CommentId]</h5>
                                <p class="card-text">@item.Text</p>
                                <a href="#" class="btn btn-primary" @onclick="@(() => ViewPost(item.PostId))">view</a>
                                <a href="#" class="btn btn-warning" @onclick="@(() => EditComment(item.CommentId))">edit</a>
                                <a href="#" class="btn btn-danger" @onclick="@(() => RemoveComment(item.CommentId))">delete</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        
        @if (_showModalPost)
        {
            <Modal>
                <p>Do you really wish to delete this post?</p>
                <button @onclick="DeletePost" class="btn btn-danger btn-rounded">delete</button>
                <button @onclick="Cancel" class="btn btn-warning btn-rounded">cancel</button>
            </Modal>
        }
        @if (_showModalComment)
        {
            <Modal>
                <p>Do you really wish to delete this post?</p>
                <button @onclick="DeleteComment" class="btn btn-danger btn-rounded">delete</button>
                <button @onclick="Cancel" class="btn btn-warning btn-rounded">cancel</button>
            </Modal>
        }
        @if (_showModalAccount)
        {
            <Modal>
                <p>Do you really wish to delete your Account?</p>
                <button @onclick="DeleteAccount" class="btn btn-danger btn-rounded">delete</button>
                <button @onclick="Cancel" class="btn btn-warning btn-rounded">cancel</button>
            </Modal>
            
        }
    </Authorized>
    
</AuthorizeView>




@code {
    private ICollection<Post>? _yourPosts;
    private ICollection<Comment>? _yourComments;

    private string _userName;
    private string _password;
    private string _errorLabel;
    
    private bool _showModalPost;
    private bool _showModalComment;
    private bool _showModalAccount;
    
    private int _selectedId;
    

    protected override async Task OnInitializedAsync()
    {
        if (_authService.GetLoggedUser() != null)
        {
            await Load();
        }
    }

    private async Task LoginAsync()
    {
        _errorLabel = "";
        try
        {
            await _authService.LoginAsync(_userName, _password);
            await Load();
        }
        catch (Exception e)
        {
            _errorLabel = $"Error: {e.Message}";
        }
    }
    
    private async Task Load()
    {
        _yourPosts = await _postService.GetPostsByAuthorId(_authService.GetLoggedUser().Id);
        _yourComments = await _commentService.GetCommentsByAuthorId(_authService.GetLoggedUser().Id);
    }

    private void Register()
    {
        _navMgr.NavigateTo("/Register");
    }

    
    
    //------Post:
    private void CreatePost()
    {
        _navMgr.NavigateTo("/CreatePost");
    }

    private void EditPost(int itemId)
    {
        _navMgr.NavigateTo($"EditPost/{itemId}");
    }
    
    private async Task RemovePost(int itemId)
    {
        _selectedId = itemId;

        await DeletePost();
        
        _errorLabel = "";
        // try
        // {
        //     _showModalPost = true;
        // }
        // catch (Exception e)
        // {
        //     _errorLabel = e.Message;
        // }
    }


    //------Comment:
    private void EditComment(int itemId)
    {
        Console.WriteLine($"Comment-id to edit {itemId}");
        // _navMgr.NavigateTo($"EditComment/{itemId}");
    }
    
    private async Task RemoveComment(int itemId)
    {
        _selectedId = itemId;

        await DeleteComment();

        // _showModalComment = true;
    }
    
    
    //------account
    private async Task RemoveAccount()
    {
        await DeleteAccount();
    // _showModalAccount = true;
    }
    
    
    //---modals
    private void ViewPost(int itemId)
    {
        _navMgr.NavigateTo($"posts/{itemId}");
    }
    
    private async Task DeletePost()
    {
        await _postService.DeleteAsync(_selectedId);
        _showModalPost = false;
    }
    private async Task DeleteComment()
    {
        await _commentService.DeleteCommentById(_selectedId);
        _showModalComment = false;
    }
    private async Task DeleteAccount()
    {
        await _userService.DeleteAsync(_authService.GetLoggedUser()!.Id);
        await _authService.LogoutAsync();
        _navMgr.NavigateTo("/");
        _showModalAccount = false;
    }
    
    private void Cancel()
    {
        _selectedId = -1;
        _showModalPost = false;
        _showModalComment = false;
        _showModalAccount = false;
    }

}
