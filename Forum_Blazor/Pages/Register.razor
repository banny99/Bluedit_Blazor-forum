@page "/Register"
@using Entities.Models
@using Contracts.Services

@inject NavigationManager _navMgr
@inject IUserService _userService

<PageTitle>Register</PageTitle>

<div class="box">
    <h3>Register</h3>
    
    <EditForm Model="@_newUser" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        @if(!string.IsNullOrEmpty(_errorLabel)) {<label style="color: red">@_errorLabel</label>}
        
        <div class="form-group field">
            <span>
                <label>Username:</label>
            </span>
            <span>
                <InputText @bind-Value="_newUser.UserName"/>
            </span>
        </div>
        <div class="form-group field">
            <span>
                <label>Password:</label>
            </span>
            <span>
                <InputText rows="4" @bind-Value="_newUser.Password"/>
            </span>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary btn-rounded" @onclick="RegisterUser">register</button>
    </EditForm>

</div>


@code {
    private User _newUser = new User();
    private string _errorLabel = String.Empty;
    
    private async Task RegisterUser()
    {
        _errorLabel = "";
        try
        {
            _newUser.Role = "none";
            
            await _userService.AddAsync(_newUser);
            _navMgr.NavigateTo("/Login");
            _newUser = new User();
        }
        catch (Exception e)
        {
            _errorLabel = e.Message;
        }
        
    }
}
